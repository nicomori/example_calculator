Interview Nicolas Mori


1)_Documentation of the approach,

I decide to use an architecture where I implement the framework maven, testNG and cucumber.

The framework execute from maven the Pom file, this call the file testng xml file, this call the file AppTest, who call the features of Cucumber and where you can see the different test cases generated, in this file is created all the test cases for GET, UPDATE and DELETE after of this file, the execution call the file STEPS where you can see all the details of  the methods.

For a better understanding the order of the executions is that,

Pom -> testng -> AppTest -> Cucumber Files Features -> Steps Clases -> Pages -> Methods 

2)_Execute cases,
Video Demostration, with the objetive for give you a fast demostration I generate a video with the execution of the project. You can see this video following the next link.

https://youtu.be/Sgd2qe5H05o
https://youtu.be/SFI8EV49xhY


3)_Reports bugs.
Nothing to report


4)_Send back the code with compiling instructions



++++++++  compiling instructions  ++++++++++

Prerequisites:
_Java Jdk 8 installed in the pc.
_Maven installed.
_Setup the variables environment.
_Json-server installed in the pc.
_Android SDK Installed
_Appium Installed.
_A cable USB for data.
_A device with Android, with the app installed. Please check I need use the app "com.android2.calculator3-6.0.10-www.APK4Fun.com.apk" located in the root of the project.



Execution JSON part,


_download the project and open a terminal, go to the root of the directory of the project where is located the file autogeneratedata.js now, move this file where is located your folder with your JSon's files, in my case I use this "/Users/nico/WebstormProjects/untitled", and execute the command "json-server autogeneratedata.js" then you can see the json server is online going to the url:

http://localhost:3000/post

If you can see the information in format JSON in the url, the deploy is OK. 

_open a new terminal window and go to the root of the project, run this command "mvn install -Dcucumber.options="--tags [TAG OF THE FEATURE FILE]" an example of the tag is in example "@Case_2C"  you need to see "BUILD SUCCESS" this command download all the dependencies and the project need to work correctly.

Reports
This project is created with the cucumber framework for execute the test from simple line text, but is created with cucumber for execute all the test cases from Jenkins and after the execution can see all the reports there, we can see not just the reports from Jenkins we use too for check the health of the test execution with semaphores lights this very help to us for see all the results of the test cases immediately.


Execution MOBILE part,

_Connect your device in the usb port
_In the terminal press "adb devices", and get the name of your device.
_Find in the root of the project the file "com.android2.calculator3-6.0.10-www.APK4Fun.com.apk" and install this file in the device.
_Setup the appium like in the image "Appium_settings.png" in the root of the project.
_Change the "Device Name" in your appium settings.
_Execute the Appium.




1.b) Write a manual test plan for 2 test cases

		1.b.1)
		Make a Mathematical Calculation, Happy Case,
		Code: APP-CALC-0001
		Preconditions:

		1. Have a android device with the app installed.
	  
	  	Steps:

	  	1.	Given I access to the app calculator in the Android real device.
	  	2.	And press the number 1000 
	  	3.	And press the symbol +
	  	4.	And press the number 2002
	  	5.	And press the symbol =

	  	Expected:

	  	1.	Access correctly to the app calculator.
	  	2.	verify the number 1000 in the app.
	  	3.	verify the symbol + appear in the app.
	  	4.	verify the number 2002 appear in the app.
	  	5.	verify if the value in the app is equal to 3002.



		1.b.2)
		Make a Mathematical Calculation, Negative Case,
		Code: APP-CALC-0002
		Preconditions:

		1. Have a android device with the app installed.
	  
	  	Steps:

	  	1.	Given I access to the app calculator in the Android real device.
	  	2.	And press the number 0 
	  	3.	And press the symbol /
	  	4.	And press the number 0
	  	5.	And press the symbol =

	  	Expected:

	  	1.	Access correctly to the app calculator.
	  	2.	verify the number 0 in the app.
	  	3.	verify the symbol / appear in the app.
	  	4.	verify the number 0 appear in the app.
	  	5.	verify if a message of error appear in the any part of the application.

